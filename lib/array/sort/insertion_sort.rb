# frozen_string_literal: true

class Array
  # Returns a new array created by sorting +self+, using insertion sort algorithm.
  #
  # Comparisons for the sort will be done using the <=> operator or using an optional code block.
  #
  # The block must implement a comparison between +a+ and +b+ and return an integer less than 0 when +b+ follows +a+,
  # +0+ when +a+ and +b+ are equivalent, or an integer greater than 0 when +a+ follows +b+.
  #
  # The result is guaranteed to be stable. When the comparison of two elements returns +0+, the order of the elements
  # will be preserved.
  #
  # @return [Array] the sorted array
  def insertion_sort(&block)
    dup.insertion_sort!(&block)
  end

  # Sorts +self+ in place, using insertion sort algorithm.
  #
  # Comparisons for the sort will be done using the <=> operator or using an optional code block.
  #
  # The block must implement a comparison between +a+ and +b+ and return an integer less than 0 when +b+ follows +a+,
  # +0+ when +a+ and +b+ are equivalent, or an integer greater than 0 when +a+ follows +b+.
  #
  # The result is guaranteed to be stable. When the comparison of two elements returns +0+, the order of the elements
  # will be preserved.
  #
  # @return [Array] +self+
  def insertion_sort!(&block)
    return self if length <= 1
    (1...length).each do |i|
      i.downto(1) do |j|
        break unless sort_compare(self[j - 1], self[j], &block) == 1
        swap(j - 1, j)
      end
    end
    self
  end

  # Returns a new array created by sorting +self+ with insertion sort algorithm, using a set of keys generated by
  # mapping the values in self through the given block.
  #
  # The result is guaranteed to be stable. When the comparison of two elements returns +0+, the order of the elements
  # will be preserved.
  #
  # If no block is given, an Enumerator is returned instead.
  #
  # @return [Array] if a block is given, the sorted array
  # @return [Enumerator] if no block is given, an Enumerator
  def insertion_sort_by(&block)
    if block_given?
      dup.insertion_sort_by!(&block)
    else
      to_enum :insertion_sort_by
    end
  end

  # Sorts +self+ in place with insertion sort algorithm, using a set of keys generated by mapping the values in self
  # through the given block.
  #
  # The result is guaranteed to be stable. When the comparison of two elements returns +0+, the order of the elements
  # will be preserved.
  #
  # If no block is given, an Enumerator is returned instead.
  #
  # @return [Array] if a block is given, the sorted array
  # @return [Enumerator] if no block is given, an Enumerator
  def insertion_sort_by!(&_block)
    if block_given?
      insertion_sort! do |a, b|
        yield(a) <=> yield(b)
      end
    else
      to_enum :insertion_sort_by!
    end
  end
end
